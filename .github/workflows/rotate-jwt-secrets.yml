name: Rotate JWT Secrets Daily
on:
  schedule:
    - cron: '0 16 * * *'  # Runs daily at midnight SGT (UTC+8)
  workflow_dispatch:    # Allows manual trigger

permissions:
  actions: write
  contents: read

jobs:
  rotate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate new JWT secret key
        id: generate_key
        run: |
          echo "new_key=$(openssl rand -hex 32)" >> $GITHUB_OUTPUT
      
      - name: Store current secret as previous (for display)
        id: store_previous
        run: |
          echo "previous_key=${{ secrets.JWT_CURRENT_SECRET }}" >> $GITHUB_OUTPUT
      
      - name: Install PyNaCl for encryption
        run: |
          pip install PyNaCl
      
      - name: Get repository public key
        id: get_public_key
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")
          echo "key_id=$(echo $response | jq -r '.key_id')" >> $GITHUB_OUTPUT
          echo "public_key=$(echo $response | jq -r '.key')" >> $GITHUB_OUTPUT
      
      - name: Update JWT_PREVIOUS_SECRET
        run: |
          python3 << 'EOF'
          import base64
          import requests
          import os
          from nacl import encoding, public
          
          # Get the current JWT secret
          current_secret = "${{ secrets.JWT_CURRENT_SECRET }}"
          
          # Encrypt the secret
          public_key_b64 = "${{ steps.get_public_key.outputs.public_key }}"
          public_key_bytes = base64.b64decode(public_key_b64)
          public_key_obj = public.PublicKey(public_key_bytes)
          sealed_box = public.SealedBox(public_key_obj)
          encrypted = sealed_box.encrypt(current_secret.encode('utf-8'))
          encrypted_b64 = base64.b64encode(encrypted).decode('utf-8')
          
          # Update the secret via API
          url = f"https://api.github.com/repos/${{ github.repository }}/actions/secrets/JWT_PREVIOUS_SECRET"
          headers = {
              "Authorization": "Bearer ${{ secrets.PAT_TOKEN }}",
              "Accept": "application/vnd.github+json"
          }
          data = {
              "encrypted_value": encrypted_b64,
              "key_id": "${{ steps.get_public_key.outputs.key_id }}"
          }
          
          response = requests.put(url, json=data, headers=headers)
          if response.status_code not in [201, 204]:
              print(f"Error updating JWT_PREVIOUS_SECRET: {response.status_code}")
              print(response.text)
              exit(1)
          print("JWT_PREVIOUS_SECRET updated successfully")
          EOF
      
      - name: Update JWT_CURRENT_SECRET
        run: |
          python3 << 'EOF'
          import base64
          import requests
          import os
          from nacl import encoding, public
          
          # Get the new JWT secret
          new_secret = "${{ steps.generate_key.outputs.new_key }}"
          
          # Encrypt the secret
          public_key_b64 = "${{ steps.get_public_key.outputs.public_key }}"
          public_key_bytes = base64.b64decode(public_key_b64)
          public_key_obj = public.PublicKey(public_key_bytes)
          sealed_box = public.SealedBox(public_key_obj)
          encrypted = sealed_box.encrypt(new_secret.encode('utf-8'))
          encrypted_b64 = base64.b64encode(encrypted).decode('utf-8')
          
          # Update the secret via API
          url = f"https://api.github.com/repos/${{ github.repository }}/actions/secrets/JWT_CURRENT_SECRET"
          headers = {
              "Authorization": "Bearer ${{ secrets.PAT_TOKEN }}",
              "Accept": "application/vnd.github+json"
          }
          data = {
              "encrypted_value": encrypted_b64,
              "key_id": "${{ steps.get_public_key.outputs.key_id }}"
          }
          
          response = requests.put(url, json=data, headers=headers)
          if response.status_code not in [201, 204]:
              print(f"Error updating JWT_CURRENT_SECRET: {response.status_code}")
              print(response.text)
              exit(1)
          print("JWT_CURRENT_SECRET updated successfully")
          EOF
      
      - name: Display new secrets for localhost update
        run: |
          echo "🔄 JWT Secret Rotation Complete!"
          echo "================================================"
          echo "📝 Update your .env file with these new values:"
          echo "================================================"
          echo "JWT_CURRENT_SECRET=${{ steps.generate_key.outputs.new_key }}"
          echo "================================================"
          echo "🔍 For JWT_PREVIOUS_SECRET:"
          echo "The previous secret is masked for security (shows as ***)."
          echo "Check your current .env file - your current JWT_CURRENT_SECRET"
          echo "should now become your new JWT_PREVIOUS_SECRET."
          echo "================================================"
          echo "📋 Steps to update your .env file:"
          echo "1. Copy your current JWT_CURRENT_SECRET from .env (this becomes JWT_PREVIOUS_SECRET)"
          echo "2. Set JWT_CURRENT_SECRET=${{ steps.generate_key.outputs.new_key }}"
          echo "3. Keep all other variables unchanged"
          echo "================================================"
          echo "Example:"
          echo "JWT_PREVIOUS_SECRET=[copy from your current .env JWT_CURRENT_SECRET]"
          echo "JWT_CURRENT_SECRET=${{ steps.generate_key.outputs.new_key }}"
